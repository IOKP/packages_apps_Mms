/*
 * Copyright (C) 2012 The CyanogenMod project
 * This code has been modified. Portions copyright (C) 2013, Dirty Unicorns Project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.android.mms.util;

import android.content.Context;
import android.text.SpannableStringBuilder;
import android.text.style.ImageSpan;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class EmojiParser
{
  public static int[] DEFAULT_EMOJI_RES_IDS;
  public static final String[] mEmojiTexts = { "😄", "😃", "😀", "😊", "☺", "😉", "😍", "😘", "😚", "😗", "😙", "😜", "😝", "😛", "😳", "😁", "😔", "😌", "😒", "😞", "😣", "😢", "😂", "😭", "😪", "😥", "😰", "😅", "😓", "😩", "😫", "😨", "😱", "😠", "😡", "😤", "😖", "😆", "😋", "😷", "😎", "😴", "😵", "😲", "😟", "😦", "😧", "😈", "👿", "😮", "😬", "😐", "😕", "😯", "😶", "😇", "😏", "😑", "👲", "👳", "👮", "👷", "💂", "👶", "👦", "👧", "👨", "👩", "👴", "👵", "👱", "👼", "👸", "😺", "😸", "😻", "😽", "😼", "🙀", "😿", "😹", "😾", "👹", "👺", "🙈", "🙉", "🙊", "💀", "👽", "💩", "🔥", "✨", "🌟", "💫", "💥", "💢", "💦", "💧", "💤", "💨", "👂", "👀", "👃", "👅", "👄", "👍", "👎", "👌", "👊", "✊", "✌", "👋", "✋", "👐", "👆", "👇", "👉", "👈", "🙌", "🙏", "☝", "👏", "💪", "🚶", "🏃", "💃", "👫", "👪", "👬", "👭", "💏", "💑", "👯", "🙆", "🙅", "💁", "🙋", "💆", "💇", "💅", "👰", "🙎", "🙍", "🙇", "🎩", "👑", "👒", "👟", "👞", "👡", "👠", "👢", "👕", "👔", "👚", "👗", "🎽", "👖", "👘", "👙", "💼", "👜", "👝", "👛", "👓", "🎀", "🌂", "💄", "💛", "💙", "💜", "💚", "❤", "💔", "💗", "💓", "💕", "💖", "💞", "💘", "💌", "💋", "💍", "💎", "👤", "👥", "💬", "👣", "💭", "🐶", "🐺", "🐱", "🐭", "🐹", "🐰", "🐸", "🐯", "🐨", "🐻", "🐷", "🐽", "🐮", "🐗", "🐵", "🐒", "🐴", "🐑", "🐘", "🐼", "🐧", "🐦", "🐤", "🐥", "🐣", "🐔", "🐍", "🐢", "🐛", "🐝", "🐜", "🐞", "🐌", "🐙", "🐚", "🐠", "🐟", "🐬", "🐳", "🐋", "🐄", "🐏", "🐀", "🐃", "🐅", "🐇", "🐉", "🐎", "🐐", "🐓", "🐕", "🐖", "🐁", "🐂", "🐲", "🐡", "🐊", "🐫", "🐪", "🐆", "🐈", "🐩", "🐾", "💐", "🌸", "🌷", "🍀", "🌹", "🌻", "🌺", "🍁", "🍃", "🍂", "🌿", "🌾", "🍄", "🌵", "🌴", "🌲", "🌳", "🌰", "🌱", "🌼", "🌐", "🌞", "🌝", "🌚", "🌑", "🌒", "🌓", "🌔", "🌕", "🌖", "🌗", "🌘", "🌜", "🌛", "🌙", "🌍", "🌎", "🌏", "🌋", "🌌", "🌠", "⭐", "☀", "⛅", "☁", "⚡", "☔", "❄", "⛄", "🌀", "🌁", "🌈", "🌊", "🎍", "💝", "🎎", "🎒", "🎓", "🎏", "🎆", "🎇", "🎐", "🎑", "🎃", "👻", "🎅", "🎄", "🎁", "🎋", "🎉", "🎊", "🎈", "🎌", "🔮", "🎥", "📷", "📹", "📼", "💿", "📀", "💽", "💾", "💻", "📱", "☎", "📞", "📟", "📠", "📡", "📺", "📻", "🔊", "🔉", "🔈", "🔇", "🔔", "🔕", "📢", "📣", "⏳", "⌛", "⏰", "⌚", "🔓", "🔒", "🔏", "🔐", "🔑", "🔎", "💡", "🔦", "🔆", "🔅", "🔌", "🔋", "🔍", "🛁", "🛀", "🚿", "🚽", "🔧", "🔩", "🔨", "🚪", "🚬", "💣", "🔫", "🔪", "💊", "💉", "💰", "💴", "💵", "💷", "💶", "💳", "💸", "📲", "📧", "📥", "📤", "✉", "📩", "📨", "📯", "📫", "📪", "📬", "📭", "📮", "📦", "📝", "📄", "📃", "📑", "📊", "📈", "📉", "📜", "📋", "📅", "📆", "📇", "📁", "📂", "✂", "📌", "📎", "✒", "✏", "📏", "📐", "📕", "📗", "📘", "📙", "📓", "📔", "📒", "📚", "📖", "🔖", "📛", "🔬", "🔭", "📰", "🎨", "🎬", "🎤", "🎧", "🎼", "🎵", "🎶", "🎹", "🎻", "🎺", "🎷", "🎸", "👾", "🎮", "🃏", "🎴", "🀄", "🎲", "🎯", "🏈", "🏀", "⚽", "⚾", "🎾", "🎱", "🏉", "🎳", "⛳", "🚵", "🚴", "🏁", "🏇", "🏆", "🎿", "🏂", "🏊", "🏄", "🎣", "☕", "🍵", "🍶", "🍼", "🍺", "🍻", "🍸", "🍹", "🍷", "🍴", "🍕", "🍔", "🍟", "🍗", "🍖", "🍝", "🍛", "🍤", "🍱", "🍣", "🍥", "🍙", "🍘", "🍚", "🍜", "🍲", "🍢", "🍡", "🍳", "🍞", "🍩", "🍮", "🍦", "🍨", "🍧", "🎂", "🍰", "🍪", "🍫", "🍬", "🍭", "🍯", "🍎", "🍏", "🍊", "🍋", "🍒", "🍇", "🍉", "🍓", "🍑", "🍈", "🍌", "🍐", "🍍", "🍠", "🍆", "🍅", "🌽", "🏠", "🏡", "🏫", "🏢", "🏣", "🏥", "🏦", "🏪", "🏩", "🏨", "💒", "⛪", "🏬", "🏤", "🌇", "🌆", "🏯", "🏰", "⛺", "🏭", "🗼", "🗾", "🗻", "🌄", "🌅", "🌃", "🗽", "🌉", "🎠", "🎡", "⛲", "🎢", "🚢", "⛵", "🚤", "🚣", "⚓", "🚀", "✈", "💺", "🚁", "🚂", "🚊", "🚉", "🚞", "🚆", "🚄", "🚅", "🚈", "🚇", "🚝", "🚋", "🚃", "🚎", "🚌", "🚍", "🚙", "🚘", "🚗", "🚕", "🚖", "🚛", "🚚", "🚨", "🚓", "🚔", "🚒", "🚑", "🚐", "🚲", "🚡", "🚟", "🚠", "🚜", "💈", "🚏", "🎫", "🚦", "🚥", "⚠", "🚧", "🔰", "⛽", "🏮", "🎰", "♨", "🗿", "🎪", "🎭", "📍", "🚩", "🇯🇵", "🇰🇷", "🇩🇪", "🇨🇳", "🇺🇸", "🇫🇷", "🇪🇸", "🇮🇹", "🇷🇺", "🇬🇧", "1⃣", "2⃣", "3⃣", "4⃣", "5⃣", "6⃣", "7⃣", "8⃣", "9⃣", "0⃣", "🔟", "🔢", "#⃣", "🔣", "⬆", "⬇", "⬅", "➡", "🔠", "🔡", "🔤", "↗", "↖", "↘", "↙", "↔", "↕", "🔄", "◀", "▶", "🔼", "🔽", "↩", "↪", "ℹ", "⏪", "⏩", "⏫", "⏬", "⤵", "⤴", "🆗", "🔀", "🔁", "🔂", "🆕", "🆙", "🆒", "🆓", "🆖", "📶", "🎦", "🈁", "🈯", "🈳", "🈵", "🈴", "🈲", "🉐", "🈹", "🈺", "🈶", "🈚", "🚻", "🚹", "🚺", "🚼", "🚾", "🚰", "🚮", "🅿", "♿", "🚭", "🈷", "🈸", "🈂", "Ⓜ", "🛂", "🛄", "🛅", "🛃", "🉑", "㊙", "㊗", "🆑", "🆘", "🆔", "🚫", "🔞", "📵", "🚯", "🚱", "🚳", "🚷", "🚸", "⛔", "✳", "❇", "❎", "✅", "✴", "💟", "🆚", "📳", "📴", "🅰", "🅱", "🆎", "🅾", "💠", "➿", "♻", "♈", "♉", "♊", "♋", "♌", "♍", "♎", "♏", "♐", "♑", "♒", "♓", "⛎", "🔯", "🏧", "💹", "💲", "💱", "©", "®", "™", "❌", "‼", "⁉", "❗", "❓", "❕", "❔", "⭕", "🔝", "🔚", "🔙", "🔛", "🔜", "🔃", "🕛", "🕧", "🕐", "🕜", "🕑", "🕝", "🕒", "🕞", "🕓", "🕟", "🕔", "🕠", "🕕", "🕖", "🕗", "🕘", "🕙", "🕚", "🕡", "🕢", "🕣", "🕤", "🕥", "🕦", "✖", "➕", "➖", "➗", "♠", "♥", "♣", "♦", "💮", "💯", "✔", "☑", "🔘", "🔗", "➰", "〰", "〽", "🔱", "◼", "◻", "◾", "◽", "▪", "▫", "🔺", "🔲", "🔳", "⚫", "⚪", "🔴", "🔵", "🔻", "⬜", "⬛", "🔶", "🔷", "🔸", "🔹" };


  public static final String[] mSoftbankEmojiTexts = { "😄", "😃", "😀", "😊", "☺", "😉", "😍", "😘", "😚", "😗", "😙", "😜", "😝", "😛", "😳", "😁", "😔", "😌", "😒", "😞", "😣", "😢", "😂", "😭", "😪", "😥", "😰", "😅", "😓", "😩", "😫", "😨", "😱", "😠", "😡", "😤", "😖", "😆", "😋", "😷", "😎", "😴", "😵", "😲", "😟", "😦", "😧", "😈", "👿", "😮", "😬", "😐", "😕", "😯", "😶", "😇", "😏", "😑", "👲", "👳", "👮", "👷", "💂", "👶", "👦", "👧", "👨", "👩", "👴", "👵", "👱", "👼", "👸", "😺", "😸", "😻", "😽", "😼", "🙀", "😿", "😹", "😾", "👹", "👺", "🙈", "🙉", "🙊", "💀", "👽", "💩", "🔥", "✨", "🌟", "💫", "💥", "💢", "💦", "💧", "💤", "💨", "👂", "👀", "👃", "👅", "👄", "👍", "👎", "👌", "👊", "✊", "✌", "👋", "✋", "👐", "👆", "👇", "👉", "👈", "🙌", "🙏", "☝", "👏", "💪", "🚶", "🏃", "💃", "👫", "👪", "👬", "👭", "💏", "💑", "👯", "🙆", "🙅", "💁", "🙋", "💆", "💇", "💅", "👰", "🙎", "🙍", "🙇", "🎩", "👑", "👒", "👟", "👞", "👡", "👠", "👢", "👕", "👔", "👚", "👗", "🎽", "👖", "👘", "👙", "💼", "👜", "👝", "👛", "👓", "🎀", "🌂", "💄", "💛", "💙", "💜", "💚", "❤", "💔", "💗", "💓", "💕", "💖", "💞", "💘", "💌", "💋", "💍", "💎", "👤", "👥", "💬", "👣", "💭", "🐶", "🐺", "🐱", "🐭", "🐹", "🐰", "🐸", "🐯", "🐨", "🐻", "🐷", "🐽", "🐮", "🐗", "🐵", "🐒", "🐴", "🐑", "🐘", "🐼", "🐧", "🐦", "🐤", "🐥", "🐣", "🐔", "🐍", "🐢", "🐛", "🐝", "🐜", "🐞", "🐌", "🐙", "🐚", "🐠", "🐟", "🐬", "🐳", "🐋", "🐄", "🐏", "🐀", "🐃", "🐅", "🐇", "🐉", "🐎", "🐐", "🐓", "🐕", "🐖", "🐁", "🐂", "🐲", "🐡", "🐊", "🐫", "🐪", "🐆", "🐈", "🐩", "🐾", "💐", "🌸", "🌷", "🍀", "🌹", "🌻", "🌺", "🍁", "🍃", "🍂", "🌿", "🌾", "🍄", "🌵", "🌴", "🌲", "🌳", "🌰", "🌱", "🌼", "🌐", "🌞", "🌝", "🌚", "🌑", "🌒", "🌓", "🌔", "🌕", "🌖", "🌗", "🌘", "🌜", "🌛", "🌙", "🌍", "🌎", "🌏", "🌋", "🌌", "🌠", "⭐", "☀", "⛅", "☁", "⚡", "☔", "❄", "⛄", "🌀", "🌁", "🌈", "🌊", "🎍", "💝", "🎎", "🎒", "🎓", "🎏", "🎆", "🎇", "🎐", "🎑", "🎃", "👻", "🎅", "🎄", "🎁", "🎋", "🎉", "🎊", "🎈", "🎌", "🔮", "🎥", "📷", "📹", "📼", "💿", "📀", "💽", "💾", "💻", "📱", "☎", "📞", "📟", "📠", "📡", "📺", "📻", "🔊", "🔉", "🔈", "🔇", "🔔", "🔕", "📢", "📣", "⏳", "⌛", "⏰", "⌚", "🔓", "🔒", "🔏", "🔐", "🔑", "🔎", "💡", "🔦", "🔆", "🔅", "🔌", "🔋", "🔍", "🛁", "🛀", "🚿", "🚽", "🔧", "🔩", "🔨", "🚪", "🚬", "💣", "🔫", "🔪", "💊", "💉", "💰", "💴", "💵", "💷", "💶", "💳", "💸", "📲", "📧", "📥", "📤", "✉", "📩", "📨", "📯", "📫", "📪", "📬", "📭", "📮", "📦", "📝", "📄", "📃", "📑", "📊", "📈", "📉", "📜", "📋", "📅", "📆", "📇", "📁", "📂", "✂", "📌", "📎", "✒", "✏", "📏", "📐", "📕", "📗", "📘", "📙", "📓", "📔", "📒", "📚", "📖", "🔖", "📛", "🔬", "🔭", "📰", "🎨", "🎬", "🎤", "🎧", "🎼", "🎵", "🎶", "🎹", "🎻", "🎺", "🎷", "🎸", "👾", "🎮", "🃏", "🎴", "🀄", "🎲", "🎯", "🏈", "🏀", "⚽", "⚾", "🎾", "🎱", "🏉", "🎳", "⛳", "🚵", "🚴", "🏁", "🏇", "🏆", "🎿", "🏂", "🏊", "🏄", "🎣", "☕", "🍵", "🍶", "🍼", "🍺", "🍻", "🍸", "🍹", "🍷", "🍴", "🍕", "🍔", "🍟", "🍗", "🍖", "🍝", "🍛", "🍤", "🍱", "🍣", "🍥", "🍙", "🍘", "🍚", "🍜", "🍲", "🍢", "🍡", "🍳", "🍞", "🍩", "🍮", "🍦", "🍨", "🍧", "🎂", "🍰", "🍪", "🍫", "🍬", "🍭", "🍯", "🍎", "🍏", "🍊", "🍋", "🍒", "🍇", "🍉", "🍓", "🍑", "🍈", "🍌", "🍐", "🍍", "🍠", "🍆", "🍅", "🌽", "🏠", "🏡", "🏫", "🏢", "🏣", "🏥", "🏦", "🏪", "🏩", "🏨", "💒", "⛪", "🏬", "🏤", "🌇", "🌆", "🏯", "🏰", "⛺", "🏭", "🗼", "🗾", "🗻", "🌄", "🌅", "🌃", "🗽", "🌉", "🎠", "🎡", "⛲", "🎢", "🚢", "⛵", "🚤", "🚣", "⚓", "🚀", "✈", "💺", "🚁", "🚂", "🚊", "🚉", "🚞", "🚆", "🚄", "🚅", "🚈", "🚇", "🚝", "🚋", "🚃", "🚎", "🚌", "🚍", "🚙", "🚘", "🚗", "🚕", "🚖", "🚛", "🚚", "🚨", "🚓", "🚔", "🚒", "🚑", "🚐", "🚲", "🚡", "🚟", "🚠", "🚜", "💈", "🚏", "🎫", "🚦", "🚥", "⚠", "🚧", "🔰", "⛽", "🏮", "🎰", "♨", "🗿", "🎪", "🎭", "📍", "🚩", "🇯🇵", "🇰🇷", "🇩🇪", "🇨🇳", "🇺🇸", "🇫🇷", "🇪🇸", "🇮🇹", "🇷🇺", "🇬🇧", "1⃣", "2⃣", "3⃣", "4⃣", "5⃣", "6⃣", "7⃣", "8⃣", "9⃣", "0⃣", "🔟", "🔢", "#⃣", "🔣", "⬆", "⬇", "⬅", "➡", "🔠", "🔡", "🔤", "↗", "↖", "↘", "↙", "↔", "↕", "🔄", "◀", "▶", "🔼", "🔽", "↩", "↪", "ℹ", "⏪", "⏩", "⏫", "⏬", "⤵", "⤴", "🆗", "🔀", "🔁", "🔂", "🆕", "🆙", "🆒", "🆓", "🆖", "📶", "🎦", "🈁", "🈯", "🈳", "🈵", "🈴", "🈲", "🉐", "🈹", "🈺", "🈶", "🈚", "🚻", "🚹", "🚺", "🚼", "🚾", "🚰", "🚮", "🅿", "♿", "🚭", "🈷", "🈸", "🈂", "Ⓜ", "🛂", "🛄", "🛅", "🛃", "🉑", "㊙", "㊗", "🆑", "🆘", "🆔", "🚫", "🔞", "📵", "🚯", "🚱", "🚳", "🚷", "🚸", "⛔", "✳", "❇", "❎", "✅", "✴", "💟", "🆚", "📳", "📴", "🅰", "🅱", "🆎", "🅾", "💠", "➿", "♻", "♈", "♉", "♊", "♋", "♌", "♍", "♎", "♏", "♐", "♑", "♒", "♓", "⛎", "🔯", "🏧", "💹", "💲", "💱", "©", "®", "™", "❌", "‼", "⁉", "❗", "❓", "❕", "❔", "⭕", "🔝", "🔚", "🔙", "🔛", "🔜", "🔃", "🕛", "🕧", "🕐", "🕜", "🕑", "🕝", "🕒", "🕞", "🕓", "🕟", "🕔", "🕠", "🕕", "🕖", "🕗", "🕘", "🕙", "🕚", "🕡", "🕢", "🕣", "🕤", "🕥", "🕦", "✖", "➕", "➖", "➗", "♠", "♥", "♣", "♦", "💮", "💯", "✔", "☑", "🔘", "🔗", "➰", "〰", "〽", "🔱", "◼", "◻", "◾", "◽", "▪", "▫", "🔺", "🔲", "🔳", "⚫", "⚪", "🔴", "🔵", "🔻", "⬜", "⬛", "🔶", "🔷", "🔸", "🔹" };


  private static EmojiParser sInstance;
  private final Context mContext;
  private final Pattern mPattern;
  private final HashMap<String, Integer> mSmileyToRes;

  private EmojiParser(Context paramContext)
  {
    this.mContext = paramContext;
    this.mSmileyToRes = buildSmileyToRes();
    this.mPattern = buildPattern();
  }

  private Pattern buildPattern()
  {
    StringBuilder localStringBuilder = new StringBuilder(5 * mEmojiTexts.length);
    localStringBuilder.append('(');
    for (int i = 0; i < mEmojiTexts.length; i++)
    {
      localStringBuilder.append(Pattern.quote(mSoftbankEmojiTexts[i]));
      localStringBuilder.append('|');
      localStringBuilder.append(Pattern.quote(mEmojiTexts[i]));
      localStringBuilder.append('|');
    }
    localStringBuilder.replace(-1 + localStringBuilder.length(), localStringBuilder.length(), ")");
    return Pattern.compile(localStringBuilder.toString());
  }

  private HashMap<String, Integer> buildSmileyToRes()
  {
    DEFAULT_EMOJI_RES_IDS = new int[mEmojiTexts.length];
    for (int i = 0; i < mEmojiTexts.length; i++)
      DEFAULT_EMOJI_RES_IDS[i] = Emojis.getSmileyResource(i);
    HashMap localHashMap = new HashMap(mEmojiTexts.length);
    for (int j = 0; j < mEmojiTexts.length; j++)
      localHashMap.put(mEmojiTexts[j], Integer.valueOf(DEFAULT_EMOJI_RES_IDS[j]));
    return localHashMap;
  }

  public static EmojiParser getInstance()
  {
    return sInstance;
  }

  public static void init(Context paramContext)
  {
    sInstance = new EmojiParser(paramContext);
  }

  public CharSequence addEmojiSpans(CharSequence paramCharSequence)
  {
    SpannableStringBuilder localSpannableStringBuilder = new SpannableStringBuilder(paramCharSequence);
    Matcher localMatcher = this.mPattern.matcher(paramCharSequence);
    while (localMatcher.find())
    {
      int i = ((Integer)this.mSmileyToRes.get(localMatcher.group())).intValue();
      localSpannableStringBuilder.setSpan(new ImageSpan(this.mContext, i), localMatcher.start(), localMatcher.end(), 33);
    }
    return localSpannableStringBuilder;
  }

  static class Emojis
  {
    private static final int[] sIconIds = { 2130838126, 2130838125, 2130838122, 2130838132, 2130838304, 2130838131, 2130838135, 2130838146, 2130838148, 2130838145, 2130838147, 2130838150, 2130838151, 2130838149, 2130838173, 2130838123, 2130838142, 2130838134, 2130838140, 2130838152, 2130838157, 2130838156, 2130838124, 2130838167, 2130838164, 2130838159, 2130838170, 2130838127, 2130838141, 2130838163, 2130838165, 2130838162, 2130838171, 2130838154, 2130838155, 2130838158, 2130838144, 2130838128, 2130838133, 2130838177, 2130838136, 2130838174, 2130838175, 2130838172, 2130838153, 2130838160, 2130838161, 2130838130, 2130837906, 2130838168, 2130838166, 2130838138, 2130838143, 2130838169, 2130838176, 2130838129, 2130838137, 2130838139, 2130837893, 2130837894, 2130837889, 2130837898, 2130837909, 2130837897, 2130837881, 2130837882, 2130837883, 2130837884, 2130837895, 2130837896, 2130837892, 2130837903, 2130837899, 2130838180, 2130838178, 2130838181, 2130838183, 2130838182, 2130838186, 2130838185, 2130838179, 2130838184, 2130837900, 2130837901, 2130838190, 2130838191, 2130838192, 2130837907, 2130837904, 2130837948, 2130838068, 2130838352, 2130837624, 2130837950, 2130837944, 2130837941, 2130837945, 2130837946, 2130837943, 2130837947, 2130837845, 2130837844, 2130837846, 2130837848, 2130837847, 2130837856, 2130837857, 2130837855, 2130837853, 2130838345, 2130838347, 2130837854, 2130838346, 2130837859, 2130837849, 2130837850, 2130837852, 2130837851, 2130838194, 2130838197, 2130838303, 2130837858, 2130837949, 2130838252, 2130837757, 2130837910, 2130837886, 2130837885, 2130837887, 2130837888, 2130837922, 2130837924, 2130837890, 2130838188, 2130838187, 2130837908, 2130838193, 2130837913, 2130837914, 2130837912, 2130837891, 2130838196, 2130838195, 2130838189, 2130837731, 2130837860, 2130837861, 2130837874, 2130837873, 2130837876, 2130837875, 2130837877, 2130837864, 2130837863, 2130837869, 2130837866, 2130837751, 2130837865, 2130837867, 2130837868, 2130837967, 2130837871, 2130837872, 2130837870, 2130837862, 2130837702, 2130837595, 2130837911, 2130837934, 2130837932, 2130837935, 2130837933, 2130838363, 2130837927, 2130837930, 2130837926, 2130837928, 2130837929, 2130837937, 2130837931, 2130837919, 2130837918, 2130837920, 2130837921, 2130837879, 2130837880, 2130837951, 2130837878, 2130837952, 2130837835, 2130837839, 2130837830, 2130837826, 2130837838, 2130837829, 2130837837, 2130837828, 2130837821, 2130837840, 2130837836, 2130837842, 2130837827, 2130837804, 2130837834, 2130837799, 2130837833, 2130837798, 2130837805, 2130837841, 2130837820, 2130837819, 2130837817, 2130837818, 2130837816, 2130837801, 2130837794, 2130837815, 2130837808, 2130837810, 2130837809, 2130837811, 2130837793, 2130837806, 2130837807, 2130837813, 2130837812, 2130837825, 2130837832, 2130837792, 2130837785, 2130837796, 2130837781, 2130837784, 2130837786, 2130837788, 2130837790, 2130837795, 2130837797, 2130837800, 2130837802, 2130837803, 2130837782, 2130837783, 2130837831, 2130837814, 2130837791, 2130837824, 2130837823, 2130837787, 2130837789, 2130837822, 2130837843, 2130837923, 2130837633, 2130837632, 2130837641, 2130837634, 2130837636, 2130837635, 2130837642, 2130837644, 2130837643, 2130837640, 2130837639, 2130837645, 2130837631, 2130837630, 2130837628, 2130837629, 2130837626, 2130837627, 2130837637, 2130837609, 2130837623, 2130837622, 2130837619, 2130837610, 2130837611, 2130837612, 2130837613, 2130837614, 2130837615, 2130837616, 2130837617, 2130837621, 2130837620, 2130837618, 2130837606, 2130837607, 2130837608, 2130837604, 2130837605, 2130837596, 2130838377, 2130838297, 2130838332, 2130838298, 2130838326, 2130838301, 2130838355, 2130838331, 2130837593, 2130837594, 2130837601, 2130837603, 2130837715, 2130837936, 2130837716, 2130837720, 2130837721, 2130837717, 2130837708, 2130837709, 2130837718, 2130837719, 2130837705, 2130837902, 2130837707, 2130837706, 2130837703, 2130837713, 2130837711, 2130837712, 2130837710, 2130837714, 2130838077, 2130837727, 2130838026, 2130838027, 2130838030, 2130837970, 2130837971, 2130837968, 2130837969, 2130837966, 2130838020, 2130838299, 2130838001, 2130838002, 2130838003, 2130838004, 2130838028, 2130838029, 2130838041, 2130838040, 2130838039, 2130838038, 2130838051, 2130838052, 2130838005, 2130838006, 2130838287, 2130838281, 2130838286, 2130838280, 2130838050, 2130838049, 2130838046, 2130838047, 2130838048, 2130838045, 2130837940, 2130838069, 2130838037, 2130838036, 2130838043, 2130838042, 2130838044, 2130838263, 2130838262, 2130838261, 2130838259, 2130838070, 2130838072, 2130838071, 2130838240, 2130838242, 2130837942, 2130838074, 2130838073, 2130837917, 2130837916, 2130837955, 2130837959, 2130837960, 2130837962, 2130837961, 2130837958, 2130837963, 2130838021, 2130838010, 2130838008, 2130838007, 2130838344, 2130838012, 2130838011, 2130838018, 2130838014, 2130838013, 2130838015, 2130838016, 2130838017, 2130838009, 2130838000, 2130837975, 2130837974, 2130837988, 2130837981, 2130837979, 2130837980, 2130837999, 2130837982, 2130837976, 2130837977, 2130837978, 2130837972, 2130837973, 2130838341, 2130837983, 2130837985, 2130838349, 2130838348, 2130837986, 2130837987, 2130837992, 2130837994, 2130837995, 2130837996, 2130837990, 2130837991, 2130837989, 2130837997, 2130837993, 2130838053, 2130837998, 2130838075, 2130838076, 2130838019, 2130837730, 2130837734, 2130837726, 2130837729, 2130837750, 2130837743, 2130837744, 2130837747, 2130837749, 2130837748, 2130837745, 2130837746, 2130837905, 2130837736, 2130837551, 2130837742, 2130837550, 2130837740, 2130837737, 2130837761, 2130837754, 2130838329, 2130838330, 2130837752, 2130837739, 2130837762, 2130837741, 2130838337, 2130838251, 2130838250, 2130837755, 2130837760, 2130837759, 2130837753, 2130837756, 2130837763, 2130837758, 2130837725, 2130838302, 2130837694, 2130837695, 2130837701, 2130837699, 2130837700, 2130837697, 2130837698, 2130837696, 2130837693, 2130837662, 2130837661, 2130837672, 2130837664, 2130837663, 2130837670, 2130837668, 2130837677, 2130837690, 2130837676, 2130837678, 2130837666, 2130837665, 2130837667, 2130837669, 2130837691, 2130837675, 2130837674, 2130837692, 2130837671, 2130837682, 2130837687, 2130837679, 2130837681, 2130837680, 2130837704, 2130837689, 2130837683, 2130837684, 2130837685, 2130837686, 2130837688, 2130837655, 2130837656, 2130837651, 2130837652, 2130837659, 2130837648, 2130837650, 2130837660, 2130837658, 2130837649, 2130837653, 2130837657, 2130837654, 2130837673, 2130837647, 2130837646, 2130837638, 2130837764, 2130837765, 2130837775, 2130837766, 2130837767, 2130837769, 2130837770, 2130837774, 2130837773, 2130837772, 2130837925, 2130838335, 2130837776, 2130837768, 2130837600, 2130837599, 2130837779, 2130837780, 2130838339, 2130837777, 2130838118, 2130838120, 2130838117, 2130837597, 2130837598, 2130837625, 2130838119, 2130837602, 2130837722, 2130837723, 2130838336, 2130837724, 2130838232, 2130838338, 2130838234, 2130838233, 2130838324, 2130838198, 2130838343, 2130837965, 2130838199, 2130838200, 2130838208, 2130838207, 2130838228, 2130838204, 2130838202, 2130838203, 2130838206, 2130838205, 2130838227, 2130838209, 2130838201, 2130838212, 2130838210, 2130838211, 2130838223, 2130838222, 2130838221, 2130838219, 2130838220, 2130838225, 2130838224, 2130838238, 2130838217, 2130838218, 2130838216, 2130838215, 2130838214, 2130838248, 2130838231, 2130838229, 2130838230, 2130838226, 2130837915, 2130838213, 2130837733, 2130838236, 2130838235, 2130838325, 2130838237, 2130838079, 2130838340, 2130837778, 2130837738, 2130838321, 2130838121, 2130837732, 2130837735, 2130837984, 2130838239, 2130837573, 2130837574, 2130837568, 2130837567, 2130837577, 2130837570, 2130837569, 2130837572, 2130837576, 2130837571, 2130837539, 2130837540, 2130837541, 2130837542, 2130837543, 2130837544, 2130837545, 2130837546, 2130837547, 2130837538, 2130838062, 2130838065, 2130837537, 2130838066, 2130838373, 2130838374, 2130838372, 2130838367, 2130838063, 2130838064, 2130838067, 2130838275, 2130838274, 2130838276, 2130838277, 2130838272, 2130838273, 2130838035, 2130838292, 2130838291, 2130838091, 2130838092, 2130838278, 2130838279, 2130838271, 2130838283, 2130838282, 2130838284, 2130838285, 2130838371, 2130838370, 2130837563, 2130838031, 2130838032, 2130838033, 2130837561, 2130837565, 2130837558, 2130837559, 2130837562, 2130838025, 2130837728, 2130837578, 2130837581, 2130837583, 2130837585, 2130837584, 2130837582, 2130837591, 2130837589, 2130837590, 2130837586, 2130837580, 2130838257, 2130838255, 2130838256, 2130838258, 2130838260, 2130838246, 2130838244, 2130837555, 2130838323, 2130838243, 2130837587, 2130837588, 2130837579, 2130838288, 2130838264, 2130838266, 2130838267, 2130838265, 2130837592, 2130838382, 2130838381, 2130837557, 2130837564, 2130837560, 2130838241, 2130838061, 2130838024, 2130838245, 2130838247, 2130838249, 2130838253, 2130838254, 2130838334, 2130838353, 2130838356, 2130838358, 2130838342, 2130838354, 2130837938, 2130837566, 2130838022, 2130838023, 2130837552, 2130837553, 2130837556, 2130837554, 2130837939, 2130838369, 2130838322, 2130838305, 2130838306, 2130838307, 2130838308, 2130838309, 2130838310, 2130838311, 2130838312, 2130838313, 2130838314, 2130838315, 2130838316, 2130838333, 2130838078, 2130837771, 2130837964, 2130837957, 2130837956, 2130837548, 2130837549, 2130838270, 2130838357, 2130838268, 2130838269, 2130838362, 2130838359, 2130838361, 2130838360, 2130838378, 2130838060, 2130838057, 2130838056, 2130838058, 2130838059, 2130838034, 2130838104, 2130838116, 2130838093, 2130838105, 2130838094, 2130838106, 2130838095, 2130838107, 2130838096, 2130838108, 2130838097, 2130838109, 2130838098, 2130838099, 2130838100, 2130838101, 2130838102, 2130838103, 2130838110, 2130838111, 2130838112, 2130838113, 2130838114, 2130838115, 2130838351, 2130838364, 2130838365, 2130838366, 2130838317, 2130838319, 2130838318, 2130838320, 2130837953, 2130837954, 2130838350, 2130838300, 2130838055, 2130838054, 2130838368, 2130838379, 2130838380, 2130838080, 2130838294, 2130838293, 2130838296, 2130838295, 2130838289, 2130838290, 2130838089, 2130838081, 2130838082, 2130838328, 2130838327, 2130838083, 2130838084, 2130838090, 2130838376, 2130838375, 2130838085, 2130838086, 2130838087, 2130838088 };

    public static int getSmileyResource(int paramInt)
    {
      return sIconIds[paramInt];
    }
  }
}
